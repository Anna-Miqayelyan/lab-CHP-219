#include <iostream>
#include <string>

class CaesarCipher {
private:
    int shift;

public:
    CaesarCipher(int s) : shift(s % 26) {}

    std::string encrypt(const std::string &text) {
        std::string result;
        for (char c : text) {
            if (isalpha(c)) {
                char base = islower(c) ? 'a' : 'A';
                result += (c - base + shift) % 26 + base;
            } else {
                result += c;
            }
        }
        return result;
    }

    std::string decrypt(const std::string &text) {
        std::string result;
        for (char c : text) {
            if (isalpha(c)) {
                char base = islower(c) ? 'a' : 'A';
                result += (c - base - shift + 26) % 26 + base;
            } else {
                result += c;
            }
        }
        return result;
    }
};

int main() {
    int shift;
    std::cout << "Enter shift value: ";
    std::cin >> shift;

    CaesarCipher cipher(shift);

    std::string text;
    std::cout << "Enter text: ";
    std::cin.ignore();
    std::getline(std::cin, text);

    std::string encrypted = cipher.encrypt(text);
    std::cout << "Encrypted: " << encrypted << std::endl;

    std::string decrypted = cipher.decrypt(encrypted);
    std::cout << "Decrypted: " << decrypted << std::endl;

    return 0;
}
